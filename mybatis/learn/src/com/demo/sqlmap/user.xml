<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user">

    <!--根据id查询-->
    <!--
    [id]：statement的id，要求在命名空间内唯一
    [parameterType]：入参的java类型
    [resultType]：查询出的单条结果集对应的java类型
    [#{}]： 表示一个占位符?
    [#{id}]：表示该占位符待接收参数的名称为id。
    注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义
    -->
    <select id="selectUserById" parameterType="int" resultType="user">
        select * from user where id = #{id}
    </select>

    <!--
             [${}]：表示拼接SQL字符串
             [${value}]：表示要拼接的是简单类型参数。
             注意：
             简单类型:int,byte,... string
            1、如果参数为简单类型时，${}里面的参数名称必须为value
            2、${}会引起SQL注入，一般情况下不推荐使用。但是有些场景必须使用${}，比如order by ${colname}
      -->

    <!--查询-->
    <select id="selectUserByName" parameterType="String" resultType="user">
        select * from user where username like '%${value}%'
    </select>

    <!-- 插入-->
    <insert id="insertUser" parameterType="com.demo.model.User">
        insert into user (username, sex, birthday, address)
        values (#{username}, #{sex}, #{birthday}, #{address}) <!--占位使用User对象的属性-->
    </insert>

    <!--删除-->
    <delete id="deleteUser" parameterType="int">
        delete from user where id = #{id}
    </delete>

    <!--更新-->
    <update id="updateUser" parameterType="user">
        update user set username = #{username}, sex=#{sex},
        birthday=#{birthday}, address=#{address}
        where id = #{id}
    </update>

    <!--插入返回主键-->
    <insert id="insertUser2" parameterType="user">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user (username, sex, birthday, address)
        values (#{username}, #{sex}, #{birthday}, #{address}) <!--占位使用User对象的属性-->
    </insert>

</mapper>