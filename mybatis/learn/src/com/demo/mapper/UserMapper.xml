<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.demo.mapper.UserMapper">
    <!--void save(User user);-->
    <insert id="save" parameterType="com.demo.model.User">
        insert into user (username, sex, birthday, address)
        values (#{username}, #{sex}, #{birthday}, #{address}) <!--占位使用User对象的属性-->
    </insert>

    <!--void delete(int id);-->
    <delete id="delete" parameterType="int">
        delete from user where id = #{id}
    </delete>

    <!--User select(int id);-->
    <select id="select" parameterType="int" resultType="user">
        select * from user where id = #{id}
    </select>

    <!--String selectByQueryVo(QueryVo vo);-->
    <!--通过QueryVo在orders表和user表中通过number查询username-->
    <select id="selectByQueryVo" parameterType="queryVo" resultType="String">
        SELECT DISTINCT username FROM orders JOIN USER ON orders.user_id = user.id WHERE number = #{order.number}
    </select>

    <!--通过Map查询用户, 参数Map要写hashmap-->
    <select id="selectByMap" parameterType="map" resultType="user">
        select * from user where id = #{id} and username = #{username}
    </select>

    <!--查询所有用户-->
    <select id="findAll" resultType="user">
        select * from user
    </select>

    <!--通过id查询用户，xml中设置returnMap-->
    <!--配置属性和查询出来的表字段的对应关系-->
    <resultMap id="userMap" type="user">
        <!--id代表表中的主键，result代表其他属性-->
        <id property="id" column="id_"></id>
        <result property="username" column="username_"></result>
        <result property="sex" column="sex_"></result>
        <result property="birthday" column="birthday_"></result>
        <result property="address" column="address_"></result>
    </resultMap>
    <select id="findUserReturnMap" parameterType="int" resultMap="userMap"> <!-- returnMap的值为配置的returnMap-->
        SELECT
        id id_, username username_, birthday birthday_, sex sex_, address address_
        FROM USER WHERE id = #{id}
    </select>

    <!--抽取sql片段-->
    <sql id="select_user_conditions">
        <if test="user.sex != null and user.sex != ''">
            sex = #{user.sex}
        </if>
        <if test="user.username != null and user.username != ''">
            and username like "%${user.username}%"
        </if>
    </sql>
    <!--通过组合查询查询用户-->
    <select id="findUserByConditions" resultType="user" parameterType="queryVo">
        select * from user

        <!--where标签，动态添加条件-->
        <where>
            <!---将sql片段包括进来-->
            <include refid="select_user_conditions"></include>
        </where>
    </select>

    <select id="findUserByIds" parameterType="queryVo" resultType="user">
        select * from user
        <where>
            <!--
                使用foreach对集合类型进行比遍历然后拼接sql
                collections: 遍历集合的属性名
                item: 每次遍历存入的变量名
                open: 遍历开始拼接的字符串
                close: 遍历结束拼接的字符串
                separator: 遍历使用的拼接分隔符
            -->
            <if test="ids != null and ids.size > 0">
                <foreach collection="ids" item="id" open="id in (" close=")" separator=",">
                    ${id}
                </foreach>
            </if>
        </where>
    </select>

    <!--通过参数为List查询用户-->
    <select id="findUserByList" parameterType="list" resultType="user">
        select * from user
        <where>
            <!--
                使用foreach对集合类型进行比遍历然后拼接sql
                collections: 遍历集合的属性名
                item: 每次遍历存入的变量名
                open: 遍历开始拼接的字符串
                close: 遍历结束拼接的字符串
                separator: 遍历使用的拼接分隔符
            -->
            <if test="list != null and list.size > 0">
                <foreach collection="list" item="id" open="id in (" close=")" separator=",">
                    ${id}
                </foreach>
            </if>
        </where>
    </select>

    <resultMap id="userResMap" type="user">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="sex" column="sex"></result>
        <result property="birthday" column="birthday"></result>
        <result property="address" column="address"></result>
        <collection property="orders" ofType="order">
            <id property="id" column="order_id"></id>
            <result property="number" column="number"></result>
            <result property="createtime" column="createtime"></result>
            <result property="note" column="note"></result>
            <collection property="orderDetails" ofType="orderDetail">
                <id property="id" column="detail_id"></id>
                <result property="itemsId" column="items_id"></result>
                <result property="itemsNum" column="items_num"></result>
                <association property="items" javaType="items">
                    <id property="id" column="items_id"></id>
                    <result property="name" column="name"></result>
                    <result property="price" column="price"></result>
                    <result property="detail" column="detail"></result>
                </association>
            </collection>
        </collection>
    </resultMap>
    <!--查找所有用户，包含他们的订单信息-->
    <select id="findUserAndOrders" resultMap="userResMap">
        SELECT
        u.*,
        o.id order_id, o.number, o.createtime, o.note,
        od.id detail_id, od.items_id ,od.items_num,
        it.name, it.price, it.detail
        FROM USER u JOIN orders o ON u.id = o.user_id
        JOIN orderdetail od ON od.orders_id = o.id
        JOIN items it ON od.items_id = it.id
    </select>
</mapper>